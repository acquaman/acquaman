Acquaman Feature Roadmap
--------------------------


Mark's short-term, ongoing
====================
- [done] AMRun: when setting the runId on scan... how to notify that run (and the run of the previous runId) to re-compute their start and end times?
- Delete experiments, close scan editors ('x' button in Sidebar)
- catch scan editor close event; prompt for save
- set scan's runId( AMUser::currentRunId() ) on scan controller start acquisition
- AMDataView: efficient update when scans are created, or re-saved with new thumbnails.
- AMDataView: feedback and maintaining responsiveness while loading
- Multiple-selection of scans with ctrl-click or equivalent
- adjustable sizing of thumbnails in AMDataViewThumbnailSectionView
- DragAndDrop onto open scan editor links in sidebar
- 'Open' button in scan editor; widget to show/add {recent, run, experiment} scans
- dynamic window names for scan editors
- [done] AMDatView: need to scroll to top when switching what's in the views; properly re-sizing the vertical height of the widget on every re-fill...




David's short-term, ongoing
=====================





Beta1 Polish
=====================
- Sample transfer walk-through
- titles and legends on plots
- adjust line/color/style of plot series
- adjust waterfall and scaling on plots

- Implement channel descriptions (+ connect to editor in AMGenericScanEditor - channel editor)

- AMRun: when setting the runId on scan... how to notify that run (and the run of the previous runId) to re-compute their start and end times? [DONE]
- Delete experiments, close scan editors ('x' button in Sidebar)
- catch scan editor close event; prompt for save
- set scan's runId( AMUser::currentRunId() ) on scan controller start acquisition
- AMDataView: efficient update when scans are created, or re-saved with new thumbnails.
- AMDataView: feedback and maintaining responsiveness while loading
- Multiple-selection of scans with ctrl-click or equivalent
- adjustable sizing of thumbnails in AMDataViewThumbnailSectionView
- DragAndDrop onto open scan editor links in sidebar
- 'Open' button in scan editor; widget to show/add {recent, run, experiment} scans
- dynamic window names for scan editors
- AMDatView: need to scroll to top when switching what's in the views; properly re-sizing the vertical height of the widget on every re-fill...




Beta1 Missing Features
=====================

- Scans: isAcquiring() and signals... + some way to stop acquiring from the scan editor? What happens when scan editor closed with a currently acquiring scan?

- Beamline quick-view control bar
- Beamline advanced control pane

- Detectors: XES detector and detector configuration
- XES scan subclass
- XES scan: custom editor
- Beamline information editor inside Scan Editor; saving beamline information
- 2D channels, and functions to turn 2d into 1d channel

- Scan setup/configuration:
	- XES scan setup
	- Wizard mode
	
- Data management view:
	- List view
	
- External import and export tools
	- import: support existing file formats: SGM XAS, PGM XAS, ALS XAS, ALS XES, general ascii columns	(auto-identify?)
		ascii import: skip 'n' first lines, specify delimeters (preview?); prompt for missing meta-data. [must work in batch mode for large set of files]
	- export: as ascii, .xls, and origin file formats. (choose channels & raw data columns to export; remember user-default settings)

Beta1 Code/API Cleanup
======================
- management of scan editors inside AMAppController
- Window management: common title bar, look, and feel
- AMSamplePlateModel cleanup: completed... why does it break the view?



Roadmap: Release1
=====================

- Sample positioning:
	- select samples by highlighting on video display
		- ray + sample-plate 3D geometry analysis
	- XES position optimization (automatically aligns for highest detector signal)

- Data management views:
	- Logbook (moewes beamteam/tregier-style table) view
	- Calendar view

- Periodic table with edge information (Use to start a coarse or fine scan)
- Excel and Origin export: export channels as math formulas, not values
- Channels: access data from other scans
- Additional math functions in channel expressions (not strictly point-based: integration, differentiation, smoothing ...)
- Drag-and-drop other scans into plots (show: recent scans, specific run, specific sample, specific experiment)


Roadmap: Release2
=====================

- Data management views:
	- Coverflow view

- Scripting framework and user interface (script console, debugger, etc.)
- General queue system (integrated with user workflow system)
- Logbook (combine drag-and-dropped plot layouts with free notes and sketches)
- Calibration tools
- User-addable metadata
- Improved 2D data handling: UI for slicing, cross-sectioning, and joining a series of 1D datasets into a 2D set
- Native import handling for data files from PGM, HXMA, ...
	- Auto-import based on user account info?
- Multi-user database (online): enables sharing data with group members, collaborators, and public (if user chooses)
- Calibration standards (in public database). Linked from periodic table: is this what my data should look like?


Roadmap - Release3
=====================
- Refining scan ranges and re-starting new scans from within plot views
- Integration with modeling and fitting tools (Athena/Artemis, IFFEFFIT/FEFF, FitIt/FDMNES, Crystal Field/Atomic Multiplet, etc.)
- Advanced plot tools: view integrated area under a curve, peak fitting, centroid finding, ...
- Sample chamber and beam 3D modeling: automatic beam cross-hair on sample video
- Raster scanning and mapping support
- Continuous sample motion for radiation-damage-sensitive samples










Random list (Mark - week of May 15.. still going on June 15... july 5. Geez!)
=============
- Add users to add a field(s) to the Db/metadata?
	- think of example story


- Import system:
	- import wizard (customized for each scan type?)
	- how to identify scan type? (automatic? how?)
	- create channels for ______ columns (remember user defaults -- where?)
	- wizard should work for single file or large set of files at once
	
- Export system:
	- choose which raw data columns and columns to export
	- choose delimeter [ascii formats only]
	- excel, origin, Igor experiment...
	- automatically open afterwards?


Database:
	- more thinking/planning about beamline-database and user-(local computer) database; synchronizing
		- 
	- loadFromDb(): ensure type() matches type column... otherwise don't allow. (if allowed, this would permit loading a scan out of the DB as a less-detailed base class, which would cause loss of information when re-saving.)
	
	- figure out how to handle "hidden" columns. (id: data needed internally by program, but not user-visible. ex: thumbnailType)
		
Database views:
	- thumbnails: specify thumbnailType (ex: PNG, normalizedDoubles, etc.)
	- general qgraphicswidget that displays a vertical (z-stack) of thumbnails... goes through thumbnails as you move mouse over (use for multi-level views)
	- more thumbnail requirements: titles below thumbnails; titles on thumbnails themselves (ex: TEY, TFY, etc.)
	
	- general view components: take a list of columns to show, a map of columns->variants for filtering/choosing which items in the db to show
	- specific view components: include the general view components; can also include specialized things like (ex: which samples are in this run, etc.)
	
	
Channels:
	- channelName: software-readable; somewhat human-readable. Also have a channelDescription?  (more flexible input, text with spaces, etc. nicely human-readable)
	- 2d equivalent to a channel
	
Samples:
	- 
	
	

- MPlot: convert to library; implement MPlotItems as true QGraphicsItem children of MPlot... so that deleting an MPlotItem will remove it from its plots
	- same possible when deleting a model? (ie: remove and delete MPlotItem's which refer to that model?)

- scan runId's: who sets them, who maintains the runs in the Db, etc?
- Experiments: objects, saving/examining from Db.
- convert all qDebug() to AMErrorMon::report() [low priority]
- AMXASScan: review Detector situation; fix bug to make sure AM...
- Write tests:
	- AMXASScan save, restore
	- channel expressions: save, restore
	- AMDbObject::runId save, restore
	- AMDbLoader: load AMXASScan
	- AMScanSetModel: make sure beginRemoveRows and endRemoveRows are being called in nested pairs
- [done] Finish 4th view in AMScanView
- [done] Create exclusive button bar for AMScanView (exclusive channel mode)

- !!! Demo day: table and thumbnail views for runs and their scans !!!


Feature request: Robert Green:


Begin forwarded message:

From: Robert Green <robert.green@usask.ca>
Date: May 7, 2010 8:44:06 AM CST
To: Mark Boots <mark.boots@usask.ca>
Subject: Re: need some beta-testing...

Hey Mark,

It works really good, I haven't seen any bugs/issues.

I do have two ideas though:

1.)  It would be nice if the cursors didn't move when you do the click/drag zoom.  I don't know how difficult that would be.  Maybe if you only move the cursors on a mouse release event, and only then if the mouse is in the same general area as when the button was pushed down?  Does that make sense?

2.)  This is just kind of a feature request.  Sometimes when I calibrate the detector angle, I space out the centroids of two peaks rather than their maxima.  The problem is I usually only estimate the centroid by eye.  Do you think it would be feasible to have the functionality where I could set the cursors on either side of a peak, and it would tell me where the centroid (half of the total integral between the cursors) is?

I'll keep playing around with it and see if I come up with anything else.


=============================================


/-----------------------------\
|      Week of March 22       |
\-----------------------------/

Boots:
D   --> Plotting finished
D   --> Database backend
     --> file locking (multiple instances of program running... same DB?)
D   --> Scan object
     --> one demo class - SGM XAS*
     --> import, export*
   --> Preliminary view of database*
     --> see what we've got* (thumbnails, tables, data management views)

===============================



Control upgrades:
D	- Control::addChild and child(size_t index)?
D	- parent controls: propagating moving signals to parents?
D	- PVControl::movingPV compare with values
D	- two categories of moving
D	- tolerance: separate handling?
	- separate units for measure and move? (Assumption: NO. linked to represent same value.



David:
   --> Scan Configuration & Scan Controller Classes
~/     --> import and link dacq library
     --> subclass controller for dacq library
       --> subclass further for example XAS controller
   --> ControlState Class
~/     --> save state, restore
     --> set, save to file, load from file
   --> UI Shells
     --> get skeletons
     --> refine feature list

/-----------------------------\
|        Feature List         |
\-----------------------------/

I. GROUPED LIST

1. Acquaman
   --> Sample Manipulation/Feedback
   --> User Data Environment
   --> Beamline Status
   --> Scan Configuration
   --> Scan Monitor
   --> Scripting
   --> Workflow
   --> Errors   (*In conjunction with Dataman)
   --> Security (*In conjunction with Dataman)

2. Dataman
   --> Incoming Data
   --> Outgoing Data
   --> Importing Data
   --> Exporting Data
   --> Catalog/Alblum
   --> Log Book
   --> Calibration
   --> Processing
   --> Errors   (*In conjunction with Acquaman)
   --> Security (*In conjunction with Acquaman)

3. Scan/Scan Controller
   --> Classes/Models
   --> Database Backend
   --> Scan Types
   --> Data
   --> Channels
   --> Metadata
   --> Math Options for Channels

4. Scan Editor
   --> Metadata Representation
   --> Display Plot
   --> Display Plot Options
   --> Properties Window
   --> Editor Save/SaveAs/Checks


II. DETAILED LISTS

1.1 Sample Manipulation/Feedback
   --> Camera Interface
     --> Click to move or click to set scan point (or accomodate both)
   --> Load Guidance
     --> Red light/green light workflow page
     --> Opportunity to collect metadata (Sample plate number, samples, etc.)

1.2 User Data Environment
   --> Automate as much as possible
     --> Can (should?) we accomodate those who want to "place" raw data?
   --> Across user accounts/permit numbers? Talk to IT & Users' Office.
   --> Decouple storage of raw data, database, and model/view

1.3 Beamline Status
   --> NEED: Beamline (Photon) Energy, Beam On/Off & feedback, Beam diagnostics(?)
   --> Upper left corner (?), small screen realestate footprint
   --> Launchable window/tab with more info
   --> Experiment/scan type dependent(?)

1.4 Scan Configuration
   --> "Manual" or "Beamline" configuration page (all current settings available)
   --> Wizard configuration pages for optimization & info collect
   --> Time estimation for scans (or multiple scans) (could reimpliment Ken's code)
   --> Manual or Wizard choice leads either directly to indirectly to all settings page
   --> Queuing multiple scans (Go Button and Add to Workflow Button)
   --> Scan Range: element edge (list or periodic table), user defined favorite, beamline favorite, manual entry
   --> Resolution/Flux: grating, slit + PREDICTOR/SUGGESTOR (learned or programmed?)
   --> Detector Selection: Diagnostics/Setup/Optimization for detectors (when to re-optimize?)
   --> Other: EPU, temperature, angle, etc...

1.5 Scan Monitor
   --> Now playing page/window (is a scan editor) (dockable or standalone)
     --> Configurables: Put new scan in new editor OR last editor; auto launch editor window OR go to now playing
   --> Workflow/brew page

1.6 Scripting
   --> Raw scripting access to classes
     --> Beamline control, scan
     --> Protect as God Mode?
   --> Assisted
     --> Convenience calls
     --> Force all user scripting to be Workflow Action Objects(?)
   --> Auto-completion
   --> Console window/page
   --> Scripts can call scripts
   --> Create features and combos (WE use to make advanced features like 2D scanning)
   --> Create wrappers (auto-pause on beam loss) (can hide from users, wrap all scans?)

1.7 Workflow
   --> Steps:
     --> Load Samples
       --> Automated guidance, checklists, stop/go lights, beamline feedback, pictures, videos (?)
       --> Move between transfer and measure positions
     --> Optimize beam position
       --> Camera as visual light feedback (short term use crosshair, long term have 3D beam tracking)
       --> Picoammeter + slit + beamline flux profile
     --> Scan Type Selection
     --> Quick Edge Check
       --> Element edge or eV region quick scan
     --> Scan Config
     --> Scan Feedback
       --> to Dataman & scan editor
       --> Endpoint adjustment: front (?), back
     --> Scan End
       --> Save scan/info
       --> Autosave unless stopped
     --> Next Sample/Action
       --> Provide notification, auto-precede after some time
   --> Scan Queue
     --> Queue up scans/actions: new {ScanType}, new movement, run script
     --> Disply like download manager
       --> List in queue, info (metadata and completion %)
       --> Buttons: See all actions/See only scans
   --> Workflow Action Items
     --> Inputs/Outputs
     --> Preconditions/Errors/User Instructions
     --> SubActions

1.8 Errors
   --> Errors on beamline status (not code errors)
     --> motor move failure, limit switch, etc...
     --> pressure, temperature, waterflow, valve problems
   --> Propogate warnings/notifications/error messages to user

1.9 Security
   --> Permissions
     --> RW on own data and own configurations/scripts
     --> R on beamline configurations/scripts
     --> R on public data library
   --> Talk with IT/Users' Office about multiple accounts and permits

2.0 Incoming Data
   --> Storing scalars
   --> Storing spectra (PGT, XEOL, RIXS)
   --> Getting dacq library output handler to make scan instances

2.1 Outgoing Data
   --> Scalars to database
   --> Spectra to database
   --> Channels
     --> Handling scalars
     --> Handling spectra
     --> Channel math
   --> Joining scans/channels for multi-dimensionality

2.2 Importing Data
   --> Old data plugins
     --> CLS format
     --> ALS format
   --> Generic plugin creator/handler
   --> Importing reference spectra

2.3 Exporting Data
   --> Direct raw data (writing new files or displaying where they are?)
   --> Channel data to file
   --> Whole scans & multiple scans (joined scans?)
   --> Arbitrary output formats (plugin creator/handler)

2.4 Catalog/Alblum
   --> Organize model
     --> Run --> Run # --> (Sample Plate?) --> Scan
     --> Experiment --> Experiment # --> (Sample Plate?) --> Scan
   --> Views:
     --> Tree-table (with metadata columns)
     --> Thumbnail gallery
     --> Columns with preview pane
   --> Sorting/Organizing/Searching
     --> on metadata: date, time, sample, file name, experiment, ranges, position, etc...
   --> Heirarchy
     --> Public Data Set
       --> Reviewed and open to public
       --> User's submitted
     --> User's Data
       --> Runs
         --> Most recent to least recent list
           --> Scans
       --> Experiments
         --> User defined naming and order
           --> Scans
   --> Sidebar gets tree view without table (no scan level or metadata)

2.5 Log Book
   --> Available as a different view on the model
   --> Allow for nice printing
   --> Additional notation and markup?

2.6 Calibration
   --> Public Library
     --> Importing from
     --> Exporting to
   --> Reference Spectra
     --> scanned in Acquaman
     --> collected elsewhere
   --> Channel math
     --> X-shifting, vertical scaling

2.7 Processing
   --> Scans & Channels
     --> Simple math: add, subtract, multiply, divide by scalar or channel
     --> Advanced math: differentiate, integrate, background normalize
     --> Creating channels from data columns
     --> Creating channels from other channels in the same scan
     --> Creating channels from other channels in other scans
   --> Joining scans
     --> Manual versions: select group and join based on new degree of freedom
     --> Automated versions
       --> select group and join, Dataman guesses the new degree of freedom
       --> select predefined scan type that results in joined data (2D mapping)
   --> General scripting
     --> Do XES binning?
     --> Plugin architecture?

3.0 Classes/Model
   --> Scan Class: representation of data, channels, and metadata
     --> has real (raw) data in "columns"
     --> has user manipulated data in "channels"
   --> Scan Configuration Class: represents a scan to be run/is running
     --> decouple from underlying library/scan routine
     --> populated from scan configuration window
     --> controls stepping and detector/data acquisition

3.1 Database Backend
   --> Start with data stored in home directory, and one database per user
   --> Move to one central database, use interface as security layer
   --> Start with user ID as part of database, easier to move to single database that way

3.2 Scan Types
   --> Subclass Scan so new class can interpret data collected and show default channels
   --> Scan Configuration subclassing not likely needed
   --> XAS Scan, XEOL Scan, XES Scan, etc...

3.3 Data
   --> Raw data stored in "columns"
   --> Will need to handle at least 2D data (SDD, XEOL, XES)
   --> Written to file
   --> Written to database (WHEN?)

3.4 Channels
   --> Manipulated dat stored in "channels"
   --> Made of:
     --> columns in same scan
     --> channels in same scan
     --> channels in other scans

3.5 Metadata
   --> Scan name (user defined)
   --> Sample name (should we make a sample object?)
   --> Start time
   --> Comments
   --> Manipulator position
   --> Sample plate (object?)
   --> Run #, Experiment Name(s), Sample Set, etc...

3.6 Math for Channels
   --> Easy math:
     --> Scalar/Channel: add, subtract, multiply, divide
     --> Normalize maximum
   --> Medium:
     --> Differentiation, integration
     --> Interpolation
     --> Normalize to channel, function, to baseline, to a peak

4.1 Metadata Representation
   --> As READ or READ/WRITE widgets based on properties in scan class
   --> Default list:
     -->
   --> Layout based on scan type?
   --> How to layout if list is long?

4.2 Display Plot
   --> On the fly/realtime update
   --> Load from alblum
   --> Load from recent
   --> Views:
     --> Tabbed: 
       --> each channel type (TEY, TFY, XES, etc) has a tab (like BL graph)
       --> buttons are exclusive (cannot have many selected)
       --> with only one scan get only one channel
       --> with more than one scan get the selected channel overplotted from every valid scan
     --> Overplot:
       --> all selected channel types are overplotted
       --> buttons are togglable (can have many selected at any time)
     --> MultiGraph Channel:
       --> each channel type in different sub-plotter (if have TEY, TFY, and XES then have three sub-plotters)
       --> main plotter window divided into sections
     --> MultiGraph Scan:
       --> each scan in differ sub-plotter with all selected channels overplotted
   --> More/Less button:
     --> Less: (Default) shows only side to side list of all channel types
     --> More: shows side to side list of all channel types with vertical list of scans

4.3 Display Plot Options
   --> Mouse wheel:
     --> Zoom in/out on plot window canvas
     --> Scroll through channels when a channel selected (?)
   --> Left click to select channel
   --> Right click for mena:
     --> On window canvas: waterfall, autoscale, match peaks
     --> On channel: display/source properties, remove channel

4.4 Properties Window
   --> Math/Source Window:
     --> Gives math options in text box with auto-complete
     --> Left side populated with channels and scan axis channel
     --> Develop combobox of channels for math option text box
     --> Develop add combobox for "[" auto-completion
     --> Add icon to manually add combobox
     --> Channel selection, deletion, adding (?)
     --> Develop slider for scalar values with live-update to plot window
     --> Develop auto-calibration routines
   --> Display Window:
     --> Color, line, and marker options
     --> Offset and scale
     --> Default setting for channel (if available) and return to default

4.5 Editor Save/SaveAs/Checks
   --> Editor CHANGES the scan channels
   --> Need to save changes
   --> Can do a SAVE AS (?)
     --> would all save as be like children of original scan (some relationship?)
   --> check for saving before closing window OR removing scan
   --> check to see if multiple copies are open in different editors
     --> time stamping on this open versus last save, etc...
